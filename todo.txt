-API-

-user-
POST-> user/register ->Register a new user.
POST-> users/login - Authenticate a user and return a token
GET->  users/profile - Get the profile of the logged-in user. 

-items-
GET-> /items - Retrieve all auction items (with pagination). 
GET-> items/:id - Retrieve a single auction item by ID. 
POST-> items - Create a new auction item. (Authenticated users, image upload) 
PUT-> items/:id - Update an auction item by ID. (Authenticated users, only item owners or admins) 
DELETE-> items/:id - Delete an auction item by ID. (Authenticated users, only item owners or admins)

Bids: 
GET /items/:itemId/bids - Retrieve all bids for a specific item. 
POST /items/:itemId/bids - Place a new bid on a specific item. (Authenticated users) 

Notifications: 

GET /notifications - Retrieve notifications for the logged-in user. 
POST /notifications/mark-read - Mark notifications as read. 
WebSocket Events: 

Bidding:

connection - Establish a new WebSocket connection. 
bid - Place a new bid on an item. 
update - Notify all connected clients about a new bid on an item.

Notifications: 

notify - Send notifications to users in real-time.



id (Primary Key) 
name (String, not null) 
description (Text, not null) 
starting_price (Decimal, not null) 
current_price (Decimal, default to starting_price) 
image_url (String, nullable) // for storing image paths 
end_time (Timestamp, not null) // auction end time 
created_at (Timestamp, default to current time) 


Create a bids table for storing bids with the following fields: 
id (Primary Key) 
item_id (Foreign Key referencing items.id) 
user_id (Foreign Key referencing users.id) 
bid_amount (Decimal, not null) 
created_at (Timestamp, default to current time) 
Create a notifications table to store notifications for users: 
id (Primary Key) 
user_id (Foreign Key referencing users.id) 
message (String, not null) 
is_read (Boolean, default to false) 
created_at (Timestamp, default to current time) 